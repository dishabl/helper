function Key() {
  return (
    <div>
      <h2 className="content-tytle">Ключи (Key)</h2>
      <p>
        Ключи помогают React определять, какие элементы были изменены, добавлены
        или удалены. Их необходимо указывать, чтобы React мог сопоставлять
        элементы массива с течением времени:
      </p>
      <pre>
        <code>{`const numbers = [1, 2, 3, 4, 5];
            const listItems = numbers.map((number) =>
              <li key={number.toString()}>
                {number}
              </li>
            );`}</code>
      </pre>
      <p>
        Лучший способ выбрать ключ — это использовать строку, которая будет явно
        отличать элемент списка от его соседей. Чаще всего вы будете
        использовать ID из ваших данных как ключи:
      </p>
      <pre>
        <code>{`const todoItems = todos.map((todo) =>
            <li key={todo.id}>
              {todo.text}
            </li>
            );`}</code>
      </pre>
      <p>Ключи нужно определять непосредственно внутри массивов.</p>
      <p>
        Если не указать ключи, в консоли увидим сообщение: Warning: Each child
        in an array or iterator should have a unique “key” prop.
      </p>
      <p>
        Ключи оптимизируют работу с элементами массивов, уменьшают количество
        ненужных удалений и созданий элементов.
      </p>
      <p>
        Без <code>key</code> механизм reconciliation сверяет компоненты попарно
        между текущим и новым VDOM. Из-за этого может происходить большое
        количество лишних перерисовок интерфейса, что замедляет работу
        приложения.
      </p>
      <p>
        Добавляя <code>key</code>, вы помогаете механизму reconciliation тем,
        что с <code>key</code> он сверяет не попарно, а ищет компоненты с тем же{" "}
        <code>key</code> (тег / имя компонента при этом учитывается) — это
        уменьшает количество перерисовок интерфейса. Обновлены/добавлены будут
        только те элементы, которые были изменены/не встречались в предыдущем
        дереве.
      </p>
      <p>
        Следите, чтобы не появлялись дублирующие <code>key</code>, при
        переключении отображения у новых данных не совпадали ключи. Это может
        привести к нежелательным сайд-эффектам, таким как анимации или
        некорректной логике поведения элемента.
      </p>
      <p>
        <code>key</code> и <code>ref</code> — специальные <code>props</code>.
        Они недоступны в компоненте, их нет в<code>child.props</code>. Можно
        получить доступ в родителе через <code>child.key</code>, но реальных
        областей применения для этого практически нет. Если в дочерних
        компонентах нужен <code>key</code> — правильным решением будет
        задублировать в prop id, например.
      </p>
    </div>
  );
}

export default Key;
